using System.IO;
using static QTRHacker.Core.PatchesManager;

namespace QTRHacker.Models
{
	public sealed class SchematicsData
	{
		private const int Version = 1;
		private const ushort Magic = 0xAABB;// used for sanity check

		public STile[,] Tiles { get; }

		public SchematicsData(int width, int height)
		{
			Tiles = new STile[width, height];
		}

		public SchematicsData(STile[,] data)
		{
			Tiles = new STile[data.GetLength(0), data.GetLength(1)];
			Array.Copy(data, Tiles, data.Length);
		}

		public static SchematicsData Load(Stream s)
		{
			BinaryReader br = new(s);
			if (br.ReadUInt16() != Magic)
				throw new InvalidDataException("Invalid format");
			int version = br.ReadInt32();
			return version switch
			{
				1 => LoadV1(br),
				_ => throw new InvalidDataException("Encountered unsupported file version, perhaps you're trying to load sche file generated by a newer hack."),
			};
		}

		private static SchematicsData LoadV1(BinaryReader br)
		{
			int maxX = br.ReadInt32();
			int maxY = br.ReadInt32();
			SchematicsData data = new(maxX, maxY);
			for (int x = 0; x < data.Tiles.GetLength(0); x++)
			{
				for (int y = 0; y < data.Tiles.GetLength(1); y++)
				{
					data.Tiles[x, y] = new()
					{
						Type = br.ReadUInt16(),
						Wall = br.ReadUInt16(),
						Liquid = br.ReadByte(),
						BTileHeader = br.ReadByte(),
						BTileHeader2 = br.ReadByte(),
						BTileHeader3 = br.ReadByte(),
						FrameX = br.ReadInt16(),
						FrameY = br.ReadInt16(),
						STileHeader = br.ReadInt16()
					};
				}
			}
			return data;
		}

		public void Save(Stream s)
		{
			BinaryWriter bw = new(s);
			bw.Write(Magic);
			bw.Write(Version);
			int maxX = Tiles.GetLength(0);
			int maxY = Tiles.GetLength(1);

			bw.Write(maxX);//x
			bw.Write(maxY);//y
			for (int x = 0; x < maxX; x++)
			{
				for (int y = 0; y < maxY; y++)
				{
					STile t = Tiles[x, y];
					bw.Write(t.Type);
					bw.Write(t.Wall);
					bw.Write(t.Liquid);
					bw.Write(t.BTileHeader);
					bw.Write(t.BTileHeader2);
					bw.Write(t.BTileHeader3);
					bw.Write(t.FrameX);
					bw.Write(t.FrameY);
					bw.Write(t.STileHeader);
				}
			}
		}
	}
}
